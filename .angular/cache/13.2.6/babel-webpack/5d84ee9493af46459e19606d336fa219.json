{"ast":null,"code":"import _asyncToGenerator from \"/home/sparkout/Desktop/Hari/Sparkout/Angular/Angular_ZUKI/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { interval } from \"rxjs\"; // import 'rxjs/add/observable/interval';\n\nimport Web3 from \"web3\";\nimport { abi, approveABI } from \"../../helpers/helper\";\n\nconst contractAbi = require(\"src/contracts/contract.abi.json\");\n\nconst web3 = new Web3(window[\"ethereum\"]);\nlet StakeComponent = class StakeComponent {\n  constructor(storagService) {\n    this.storagService = storagService;\n    this.viewMode = \"onGoing\";\n    this.showPoolInfo = true;\n    this.depositToken = 100;\n    this.isApproveContractShown = false;\n    this.isConfirmationShown = false;\n    this.isUploadShown = false;\n    this.poolLength = 0;\n    this.contractAddress = \"0xF395f96913dCd9e3AEEbBb8d82eE47F5A3ACc4c8\";\n    this.approveAddress = \"0x2811dE52B41267D6FD126B4F8d0ac2248E1C9624\";\n    this.poolsOngoing = [];\n    this.tpoolsOngoing = [];\n    this.poolsUpcoming = [];\n    this.poolsClaim = [];\n    this.poolsCompleted = [];\n    this.poolsMyDeal = [];\n    this.activeIndex = -1;\n    this.showLive = false; // dealsId: any = 0;\n\n    this.countDown = [];\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // this.web3Service.connect();\n      console.log(contractAbi);\n      _this.contract = yield new web3.eth.Contract(abi, _this.contractAddress);\n      console.log(_this.contract);\n      yield _this.setPoolLength();\n      yield _this.createPath();\n      const obs$ = yield interval(1000);\n      obs$.subscribe(d => {\n        _this.transform(1, 1);\n      });\n    })();\n  }\n\n  createPath() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let i = 0; i < _this2.poolLength; i++) {\n        var nm = 2;\n\n        var count = _this2.countDown.push(nm);\n\n        console.log(count);\n      }\n    })();\n  }\n\n  calculateTime() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let i = 0; i < _this3.poolLength; i++) {\n        const userInfo = yield _this3.contract.methods.userInfo(i, localStorage.getItem(\"connecttedAddress\")).call({\n          from: localStorage.getItem(\"connecttedAddress\")\n        });\n        const poolInfo = yield _this3.contract.methods.poolInfo(i).call();\n      }\n    })();\n  }\n\n  transform(i, id) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let i = 0; i < _this4.poolLength; i++) {\n        var stakedAmount = yield _this4.contract.methods.getUserStakedTokenInPool(i).call({\n          from: localStorage.getItem(\"connecttedAddress\")\n        });\n        console.log(stakedAmount);\n        const userInfo = yield _this4.contract.methods.userInfo(i, localStorage.getItem(\"connecttedAddress\")).call({\n          from: localStorage.getItem(\"connecttedAddress\")\n        });\n        const poolInfo = yield _this4.contract.methods.poolInfo(i).call();\n        var currentTime = yield Math.floor(Date.now() / 1000);\n        let future = new Date(userInfo.stakingEndTime * 1000);\n        let now = new Date();\n        let diff = future - now;\n        let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n        let hours = Math.floor(diff / (1000 * 60 * 60));\n        let mins = Math.floor(diff / (1000 * 60));\n        let secs = Math.floor(diff / 1000);\n        let d = days;\n        let h = hours - days * 24;\n        let m = mins - hours * 60;\n        let s = secs - mins * 60;\n        console.log(d + \":\" + h + \":\" + m + \":\" + s);\n        var stakedAmount = yield _this4.contract.methods.getUserStakedTokenInPool(i).call({\n          from: localStorage.getItem(\"connecttedAddress\")\n        });\n        console.log(stakedAmount);\n\n        _this4.upDateCountDown(stakedAmount, userInfo, currentTime, i, d, h, m, s);\n      }\n    })();\n  }\n\n  upDateCountDown(stakedAmount, userInfo, currentTime, i, d, h, m, s) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (stakedAmount > 0 && userInfo.stakingEndTime < currentTime) {\n        _this5.countDown[i] = \"Please Claim The Reward\";\n      } else if (stakedAmount == 0) {\n        _this5.countDown[i] = \"No reward to Claim\";\n      } else {\n        _this5.countDown[i] = d + \":\" + h + \":\" + m + \":\" + s;\n      }\n    })();\n  }\n\n  setPoolLength() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.poolLength = yield _this6.contract.methods.poolLength().call();\n      console.log(_this6.poolLength);\n\n      _this6.syncPool();\n    })();\n  }\n  /**\n   * on toggle between live/completed\n   * @param{string}sectionName\n   */\n\n\n  onToggle(sectionName) {\n    this.viewMode = sectionName;\n    this.viewMode === \"onGoing\" ? this.showLive = true : this.showLive = false;\n    console.log(this.showLive);\n  }\n\n  syncPool() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let i = 0; i < _this7.poolLength; i++) {\n        const poolInfo = yield _this7.contract.methods.poolInfo(i).call();\n        const stakedInpoolInfo = yield _this7.contract.methods.getTotalStakedInPool(i).call();\n        const userInfo = yield _this7.contract.methods.userInfo(i, localStorage.getItem(\"connecttedAddress\")).call({\n          from: localStorage.getItem(\"connecttedAddress\")\n        });\n        console.log(\"userINfo\", userInfo);\n        console.log(\"poolInfo\", poolInfo);\n\n        _this7.calaculation(poolInfo, userInfo, stakedInpoolInfo, i);\n      }\n    })();\n  }\n\n  calaculation(poolInfo, userInfo, stakedInpoolInfo, _pid) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      let EndTime = new Date(poolInfo.endTime * 1000);\n      let startTime = new Date(poolInfo.startTime * 1000);\n      poolInfo.readableEndTime = EndTime.getDate() + \"/\" + EndTime.getMonth() + \"/\" + EndTime.getFullYear() + \" , \" + EndTime.getHours() + \":\" + EndTime.getMinutes() + \":\" + EndTime.getSeconds();\n      poolInfo.readableStartTime = startTime.getDate() + \"/\" + startTime.getMonth() + \"/\" + startTime.getFullYear() + \" , \" + startTime.getHours() + \":\" + startTime.getMinutes() + \":\" + startTime.getSeconds();\n      let lockPeriodSec = poolInfo.duration * 60;\n      var d = Math.floor(lockPeriodSec / (3600 * 24));\n      var h = Math.floor(lockPeriodSec % (3600 * 24) / 3600);\n      var m = Math.floor(lockPeriodSec % 3600 / 60);\n      var s = Math.floor(lockPeriodSec % 60);\n      poolInfo.lockPeriod = d + \"d: \" + h + \"h: \" + m + \"m: \" + s;\n      poolInfo.stakebleAmount = (yield poolInfo.poolStakableAmount) / 10 ** 18;\n      poolInfo.stakedInPool = (yield stakedInpoolInfo) / 10 ** 18;\n      poolInfo.stakedPercentage = (yield poolInfo.stakedInPool / poolInfo.stakebleAmount) * 100;\n      console.log(poolInfo.duration);\n      var currentTime = yield Math.floor(Date.now() / 1000);\n      console.log(currentTime);\n      console.log(poolInfo.endTime);\n      var stakedAmount = yield _this8.contract.methods.getUserStakedTokenInPool(_pid).call({\n        from: localStorage.getItem(\"connecttedAddress\")\n      });\n      console.log(stakedAmount);\n      poolInfo.userStakedAmount = stakedAmount / 10 ** 18;\n      let userStakeEndTime = new Date(userInfo.stakingEndTime * 1000); // poolInfo.countDown = 0\n\n      poolInfo.userStakeEndTime = userStakeEndTime.getDate() + \"/\" + userStakeEndTime.getMonth() + \"/\" + userStakeEndTime.getFullYear() + \" , \" + userStakeEndTime.getHours() + \":\" + userStakeEndTime.getMinutes() + \":\" + userStakeEndTime.getSeconds();\n      poolInfo.userExpectedReward = userInfo.expectedReward / 10 ** 18;\n      poolInfo.poolId = _pid;\n\n      if (currentTime > poolInfo.endTime && currentTime > poolInfo.startTime) {\n        _this8.poolsCompleted.push(poolInfo);\n\n        poolInfo[\"poolsStatus\"] = \"completed\";\n        console.log(\"completed\");\n      } else if (currentTime < poolInfo.startTime && currentTime < poolInfo.endTime) {\n        _this8.poolsUpcoming.push(poolInfo);\n\n        poolInfo[\"poolsStatus\"] = \"upcoming\";\n        console.log(\"upcoming\");\n      } else if (currentTime < poolInfo.endTime && currentTime > poolInfo.startTime) {\n        _this8.poolsOngoing.push(poolInfo);\n\n        console.log(\"Ongoing\");\n        poolInfo[\"poolsStatus\"] = \"ongoing\";\n      }\n\n      if (stakedAmount > 0) {\n        _this8.poolsMyDeal.push(poolInfo);\n      }\n\n      if (userInfo.isStaking && userInfo.stakingEndTime < currentTime) {\n        _this8.poolsClaim.push(poolInfo);\n      }\n    })();\n  }\n\n  stakeToken(_pid) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      _this9.contract = new web3.eth.Contract(abi, _this9.contractAddress);\n      _this9.approveContract = new web3.eth.Contract(approveABI, _this9.approveAddress);\n      console.log(_pid);\n      let approveToken = yield _this9.approveContract.methods.approve(_this9.contractAddress, BigInt(_this9.depositToken * 10 ** 18)).send({\n        from: localStorage.getItem(\"connecttedAddress\")\n      }).then(receipt => {\n        console.log(receipt);\n      });\n      let stakeToken = yield _this9.contract.methods.stakeTokens(_pid, BigInt(_this9.depositToken * 10 ** 18)).send({\n        from: localStorage.getItem(\"connecttedAddress\")\n      }).then(receipt => {\n        console.log(receipt);\n      });\n    })();\n  }\n\n  ClaimToken(_pid) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      let claimToken = yield _this10.contract.methods.withdrawAll(_pid).send({\n        from: localStorage.getItem(\"connecttedAddress\")\n      }).then(receipt => {\n        console.log(receipt);\n      });\n    })();\n  }\n\n  togglePoolInfo() {\n    this.showPoolInfo = !this.showPoolInfo;\n  }\n\n  openContractModal() {\n    this.isApproveContractShown = true;\n  }\n\n  closeContractModal() {\n    this.isApproveContractShown = false;\n  }\n\n  openConfirmation() {\n    this.isConfirmationShown = true;\n    setTimeout(() => {\n      this.isConfirmationShown = false;\n      this.isUploadShown = true;\n    }, 1000);\n  }\n\n  closeConfirmation() {\n    this.isUploadShown = false;\n  }\n\n};\nStakeComponent = __decorate([Component({\n  selector: \"app-stake\",\n  templateUrl: \"./stake.component.html\",\n  styleUrls: [\"./stake.component.css\"]\n})], StakeComponent);\nexport { StakeComponent };","map":{"version":3,"sources":["/home/sparkout/Desktop/Hari/Sparkout/Angular/Angular_ZUKI/src/app/pageComponents/stake/stake.component.ts"],"names":["__decorate","Component","interval","Web3","abi","approveABI","contractAbi","require","web3","window","StakeComponent","constructor","storagService","viewMode","showPoolInfo","depositToken","isApproveContractShown","isConfirmationShown","isUploadShown","poolLength","contractAddress","approveAddress","poolsOngoing","tpoolsOngoing","poolsUpcoming","poolsClaim","poolsCompleted","poolsMyDeal","activeIndex","showLive","countDown","ngOnInit","console","log","contract","eth","Contract","setPoolLength","createPath","obs$","subscribe","d","transform","i","nm","count","push","calculateTime","userInfo","methods","localStorage","getItem","call","from","poolInfo","id","stakedAmount","getUserStakedTokenInPool","currentTime","Math","floor","Date","now","future","stakingEndTime","diff","days","hours","mins","secs","h","m","s","upDateCountDown","syncPool","onToggle","sectionName","stakedInpoolInfo","getTotalStakedInPool","calaculation","_pid","EndTime","endTime","startTime","readableEndTime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","readableStartTime","lockPeriodSec","duration","lockPeriod","stakebleAmount","poolStakableAmount","stakedInPool","stakedPercentage","userStakedAmount","userStakeEndTime","userExpectedReward","expectedReward","poolId","isStaking","stakeToken","approveContract","approveToken","approve","BigInt","send","then","receipt","stakeTokens","ClaimToken","claimToken","withdrawAll","togglePoolInfo","openContractModal","closeContractModal","openConfirmation","setTimeout","closeConfirmation","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { interval } from \"rxjs\";\n// import 'rxjs/add/observable/interval';\nimport Web3 from \"web3\";\nimport { abi, approveABI } from \"../../helpers/helper\";\nconst contractAbi = require(\"src/contracts/contract.abi.json\");\nconst web3 = new Web3(window[\"ethereum\"]);\nlet StakeComponent = class StakeComponent {\n    constructor(storagService) {\n        this.storagService = storagService;\n        this.viewMode = \"onGoing\";\n        this.showPoolInfo = true;\n        this.depositToken = 100;\n        this.isApproveContractShown = false;\n        this.isConfirmationShown = false;\n        this.isUploadShown = false;\n        this.poolLength = 0;\n        this.contractAddress = \"0xF395f96913dCd9e3AEEbBb8d82eE47F5A3ACc4c8\";\n        this.approveAddress = \"0x2811dE52B41267D6FD126B4F8d0ac2248E1C9624\";\n        this.poolsOngoing = [];\n        this.tpoolsOngoing = [];\n        this.poolsUpcoming = [];\n        this.poolsClaim = [];\n        this.poolsCompleted = [];\n        this.poolsMyDeal = [];\n        this.activeIndex = -1;\n        this.showLive = false;\n        // dealsId: any = 0;\n        this.countDown = [];\n    }\n    async ngOnInit() {\n        // this.web3Service.connect();\n        console.log(contractAbi);\n        this.contract = await new web3.eth.Contract(abi, this.contractAddress);\n        console.log(this.contract);\n        await this.setPoolLength();\n        await this.createPath();\n        const obs$ = await interval(1000);\n        obs$.subscribe((d) => {\n            this.transform(1, 1);\n        });\n    }\n    async createPath() {\n        for (let i = 0; i < this.poolLength; i++) {\n            var nm = 2;\n            var count = this.countDown.push(nm);\n            console.log(count);\n        }\n    }\n    async calculateTime() {\n        for (let i = 0; i < this.poolLength; i++) {\n            const userInfo = await this.contract.methods\n                .userInfo(i, localStorage.getItem(\"connecttedAddress\"))\n                .call({ from: localStorage.getItem(\"connecttedAddress\") });\n            const poolInfo = await this.contract.methods.poolInfo(i).call();\n        }\n    }\n    async transform(i, id) {\n        for (let i = 0; i < this.poolLength; i++) {\n            var stakedAmount = await this.contract.methods\n                .getUserStakedTokenInPool(i)\n                .call({ from: localStorage.getItem(\"connecttedAddress\") });\n            console.log(stakedAmount);\n            const userInfo = await this.contract.methods\n                .userInfo(i, localStorage.getItem(\"connecttedAddress\"))\n                .call({ from: localStorage.getItem(\"connecttedAddress\") });\n            const poolInfo = await this.contract.methods.poolInfo(i).call();\n            var currentTime = await Math.floor(Date.now() / 1000);\n            let future = new Date(userInfo.stakingEndTime * 1000);\n            let now = new Date();\n            let diff = future - now;\n            let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n            let hours = Math.floor(diff / (1000 * 60 * 60));\n            let mins = Math.floor(diff / (1000 * 60));\n            let secs = Math.floor(diff / 1000);\n            let d = days;\n            let h = hours - days * 24;\n            let m = mins - hours * 60;\n            let s = secs - mins * 60;\n            console.log(d + \":\" + h + \":\" + m + \":\" + s);\n            var stakedAmount = await this.contract.methods\n                .getUserStakedTokenInPool(i)\n                .call({ from: localStorage.getItem(\"connecttedAddress\") });\n            console.log(stakedAmount);\n            this.upDateCountDown(stakedAmount, userInfo, currentTime, i, d, h, m, s);\n        }\n    }\n    async upDateCountDown(stakedAmount, userInfo, currentTime, i, d, h, m, s) {\n        if (stakedAmount > 0 && userInfo.stakingEndTime < currentTime) {\n            this.countDown[i] = \"Please Claim The Reward\";\n        }\n        else if (stakedAmount == 0) {\n            this.countDown[i] = \"No reward to Claim\";\n        }\n        else {\n            this.countDown[i] = d + \":\" + h + \":\" + m + \":\" + s;\n        }\n    }\n    async setPoolLength() {\n        this.poolLength = await this.contract.methods.poolLength().call();\n        console.log(this.poolLength);\n        this.syncPool();\n    }\n    /**\n     * on toggle between live/completed\n     * @param{string}sectionName\n     */\n    onToggle(sectionName) {\n        this.viewMode = sectionName;\n        this.viewMode === \"onGoing\"\n            ? (this.showLive = true)\n            : (this.showLive = false);\n        console.log(this.showLive);\n    }\n    async syncPool() {\n        for (let i = 0; i < this.poolLength; i++) {\n            const poolInfo = await this.contract.methods.poolInfo(i).call();\n            const stakedInpoolInfo = await this.contract.methods\n                .getTotalStakedInPool(i)\n                .call();\n            const userInfo = await this.contract.methods\n                .userInfo(i, localStorage.getItem(\"connecttedAddress\"))\n                .call({ from: localStorage.getItem(\"connecttedAddress\") });\n            console.log(\"userINfo\", userInfo);\n            console.log(\"poolInfo\", poolInfo);\n            this.calaculation(poolInfo, userInfo, stakedInpoolInfo, i);\n        }\n    }\n    async calaculation(poolInfo, userInfo, stakedInpoolInfo, _pid) {\n        let EndTime = new Date(poolInfo.endTime * 1000);\n        let startTime = new Date(poolInfo.startTime * 1000);\n        poolInfo.readableEndTime =\n            EndTime.getDate() +\n                \"/\" +\n                EndTime.getMonth() +\n                \"/\" +\n                EndTime.getFullYear() +\n                \" , \" +\n                EndTime.getHours() +\n                \":\" +\n                EndTime.getMinutes() +\n                \":\" +\n                EndTime.getSeconds();\n        poolInfo.readableStartTime =\n            startTime.getDate() +\n                \"/\" +\n                startTime.getMonth() +\n                \"/\" +\n                startTime.getFullYear() +\n                \" , \" +\n                startTime.getHours() +\n                \":\" +\n                startTime.getMinutes() +\n                \":\" +\n                startTime.getSeconds();\n        let lockPeriodSec = poolInfo.duration * 60;\n        var d = Math.floor(lockPeriodSec / (3600 * 24));\n        var h = Math.floor((lockPeriodSec % (3600 * 24)) / 3600);\n        var m = Math.floor((lockPeriodSec % 3600) / 60);\n        var s = Math.floor(lockPeriodSec % 60);\n        poolInfo.lockPeriod = d + \"d: \" + h + \"h: \" + m + \"m: \" + s;\n        poolInfo.stakebleAmount = (await poolInfo.poolStakableAmount) / 10 ** 18;\n        poolInfo.stakedInPool = (await stakedInpoolInfo) / 10 ** 18;\n        poolInfo.stakedPercentage =\n            (await (poolInfo.stakedInPool / poolInfo.stakebleAmount)) * 100;\n        console.log(poolInfo.duration);\n        var currentTime = await Math.floor(Date.now() / 1000);\n        console.log(currentTime);\n        console.log(poolInfo.endTime);\n        var stakedAmount = await this.contract.methods\n            .getUserStakedTokenInPool(_pid)\n            .call({ from: localStorage.getItem(\"connecttedAddress\") });\n        console.log(stakedAmount);\n        poolInfo.userStakedAmount = stakedAmount / 10 ** 18;\n        let userStakeEndTime = new Date(userInfo.stakingEndTime * 1000);\n        // poolInfo.countDown = 0\n        poolInfo.userStakeEndTime =\n            userStakeEndTime.getDate() +\n                \"/\" +\n                userStakeEndTime.getMonth() +\n                \"/\" +\n                userStakeEndTime.getFullYear() +\n                \" , \" +\n                userStakeEndTime.getHours() +\n                \":\" +\n                userStakeEndTime.getMinutes() +\n                \":\" +\n                userStakeEndTime.getSeconds();\n        poolInfo.userExpectedReward = userInfo.expectedReward / 10 ** 18;\n        poolInfo.poolId = _pid;\n        if (currentTime > poolInfo.endTime && currentTime > poolInfo.startTime) {\n            this.poolsCompleted.push(poolInfo);\n            poolInfo[\"poolsStatus\"] = \"completed\";\n            console.log(\"completed\");\n        }\n        else if (currentTime < poolInfo.startTime &&\n            currentTime < poolInfo.endTime) {\n            this.poolsUpcoming.push(poolInfo);\n            poolInfo[\"poolsStatus\"] = \"upcoming\";\n            console.log(\"upcoming\");\n        }\n        else if (currentTime < poolInfo.endTime &&\n            currentTime > poolInfo.startTime) {\n            this.poolsOngoing.push(poolInfo);\n            console.log(\"Ongoing\");\n            poolInfo[\"poolsStatus\"] = \"ongoing\";\n        }\n        if (stakedAmount > 0) {\n            this.poolsMyDeal.push(poolInfo);\n        }\n        if (userInfo.isStaking && userInfo.stakingEndTime < currentTime) {\n            this.poolsClaim.push(poolInfo);\n        }\n    }\n    async stakeToken(_pid) {\n        this.contract = new web3.eth.Contract(abi, this.contractAddress);\n        this.approveContract = new web3.eth.Contract(approveABI, this.approveAddress);\n        console.log(_pid);\n        let approveToken = await this.approveContract.methods\n            .approve(this.contractAddress, BigInt(this.depositToken * 10 ** 18))\n            .send({ from: localStorage.getItem(\"connecttedAddress\") })\n            .then((receipt) => {\n            console.log(receipt);\n        });\n        let stakeToken = await this.contract.methods\n            .stakeTokens(_pid, BigInt(this.depositToken * 10 ** 18))\n            .send({ from: localStorage.getItem(\"connecttedAddress\") })\n            .then((receipt) => {\n            console.log(receipt);\n        });\n    }\n    async ClaimToken(_pid) {\n        let claimToken = await this.contract.methods\n            .withdrawAll(_pid)\n            .send({ from: localStorage.getItem(\"connecttedAddress\") })\n            .then((receipt) => {\n            console.log(receipt);\n        });\n    }\n    togglePoolInfo() {\n        this.showPoolInfo = !this.showPoolInfo;\n    }\n    openContractModal() {\n        this.isApproveContractShown = true;\n    }\n    closeContractModal() {\n        this.isApproveContractShown = false;\n    }\n    openConfirmation() {\n        this.isConfirmationShown = true;\n        setTimeout(() => {\n            this.isConfirmationShown = false;\n            this.isUploadShown = true;\n        }, 1000);\n    }\n    closeConfirmation() {\n        this.isUploadShown = false;\n    }\n};\nStakeComponent = __decorate([\n    Component({\n        selector: \"app-stake\",\n        templateUrl: \"./stake.component.html\",\n        styleUrls: [\"./stake.component.css\"],\n    })\n], StakeComponent);\nexport { StakeComponent };\n"]},"metadata":{},"sourceType":"module"}