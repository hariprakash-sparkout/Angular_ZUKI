{"ast":null,"code":"import _asyncToGenerator from \"/home/sparkout/Desktop/Hari/Sparkout/Angular/Angular_ZUKI/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as env from \"@walletconnect/environment\";\nimport { ENCRYPT_OP, DECRYPT_OP, SIGN_OP, VERIFY_OP, AES_BROWSER_ALGO, AES_LENGTH, HMAC_BROWSER_ALGO, HMAC_BROWSER, HMAC_LENGTH, SHA256_BROWSER_ALGO, SHA512_BROWSER_ALGO, LENGTH_512 } from \"../constants\";\nexport function getAlgo(type) {\n  return type === AES_BROWSER_ALGO ? {\n    length: AES_LENGTH,\n    name: AES_BROWSER_ALGO\n  } : {\n    hash: {\n      name: HMAC_BROWSER_ALGO\n    },\n    name: HMAC_BROWSER\n  };\n}\nexport function getOps(type) {\n  return type === AES_BROWSER_ALGO ? [ENCRYPT_OP, DECRYPT_OP] : [SIGN_OP, VERIFY_OP];\n}\nexport function browserExportKey(_x) {\n  return _browserExportKey.apply(this, arguments);\n}\n\nfunction _browserExportKey() {\n  _browserExportKey = _asyncToGenerator(function* (cryptoKey, type = AES_BROWSER_ALGO) {\n    const subtle = env.getSubtleCrypto();\n    return new Uint8Array(yield subtle.exportKey(\"raw\", cryptoKey));\n  });\n  return _browserExportKey.apply(this, arguments);\n}\n\nexport function browserImportKey(_x2) {\n  return _browserImportKey.apply(this, arguments);\n}\n\nfunction _browserImportKey() {\n  _browserImportKey = _asyncToGenerator(function* (buffer, type = AES_BROWSER_ALGO) {\n    return env.getSubtleCrypto().importKey(\"raw\", buffer, getAlgo(type), true, getOps(type));\n  });\n  return _browserImportKey.apply(this, arguments);\n}\n\nexport function browserAesEncrypt(_x3, _x4, _x5) {\n  return _browserAesEncrypt.apply(this, arguments);\n}\n\nfunction _browserAesEncrypt() {\n  _browserAesEncrypt = _asyncToGenerator(function* (iv, key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, AES_BROWSER_ALGO);\n    const result = yield subtle.encrypt({\n      iv,\n      name: AES_BROWSER_ALGO\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n  });\n  return _browserAesEncrypt.apply(this, arguments);\n}\n\nexport function browserAesDecrypt(_x6, _x7, _x8) {\n  return _browserAesDecrypt.apply(this, arguments);\n}\n\nfunction _browserAesDecrypt() {\n  _browserAesDecrypt = _asyncToGenerator(function* (iv, key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, AES_BROWSER_ALGO);\n    const result = yield subtle.decrypt({\n      iv,\n      name: AES_BROWSER_ALGO\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n  });\n  return _browserAesDecrypt.apply(this, arguments);\n}\n\nexport function browserHmacSha256Sign(_x9, _x10) {\n  return _browserHmacSha256Sign.apply(this, arguments);\n}\n\nfunction _browserHmacSha256Sign() {\n  _browserHmacSha256Sign = _asyncToGenerator(function* (key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, HMAC_BROWSER);\n    const signature = yield subtle.sign({\n      length: HMAC_LENGTH,\n      name: HMAC_BROWSER\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n  });\n  return _browserHmacSha256Sign.apply(this, arguments);\n}\n\nexport function browserHmacSha512Sign(_x11, _x12) {\n  return _browserHmacSha512Sign.apply(this, arguments);\n}\n\nfunction _browserHmacSha512Sign() {\n  _browserHmacSha512Sign = _asyncToGenerator(function* (key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, HMAC_BROWSER);\n    const signature = yield subtle.sign({\n      length: LENGTH_512,\n      name: HMAC_BROWSER\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n  });\n  return _browserHmacSha512Sign.apply(this, arguments);\n}\n\nexport function browserSha256(_x13) {\n  return _browserSha.apply(this, arguments);\n}\n\nfunction _browserSha() {\n  _browserSha = _asyncToGenerator(function* (data) {\n    const subtle = env.getSubtleCrypto();\n    const result = yield subtle.digest({\n      name: SHA256_BROWSER_ALGO\n    }, data);\n    return new Uint8Array(result);\n  });\n  return _browserSha.apply(this, arguments);\n}\n\nexport function browserSha512(_x14) {\n  return _browserSha2.apply(this, arguments);\n}\n\nfunction _browserSha2() {\n  _browserSha2 = _asyncToGenerator(function* (data) {\n    const subtle = env.getSubtleCrypto();\n    const result = yield subtle.digest({\n      name: SHA512_BROWSER_ALGO\n    }, data);\n    return new Uint8Array(result);\n  });\n  return _browserSha2.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/sparkout/Desktop/Hari/Sparkout/Angular/Angular_ZUKI/node_modules/@walletconnect/crypto/dist/esm/lib/browser.js"],"names":["env","ENCRYPT_OP","DECRYPT_OP","SIGN_OP","VERIFY_OP","AES_BROWSER_ALGO","AES_LENGTH","HMAC_BROWSER_ALGO","HMAC_BROWSER","HMAC_LENGTH","SHA256_BROWSER_ALGO","SHA512_BROWSER_ALGO","LENGTH_512","getAlgo","type","length","name","hash","getOps","browserExportKey","cryptoKey","subtle","getSubtleCrypto","Uint8Array","exportKey","browserImportKey","buffer","importKey","browserAesEncrypt","iv","key","data","result","encrypt","browserAesDecrypt","decrypt","browserHmacSha256Sign","signature","sign","browserHmacSha512Sign","browserSha256","digest","browserSha512"],"mappings":"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","sourcesContent":["import * as env from \"@walletconnect/environment\";\nimport { ENCRYPT_OP, DECRYPT_OP, SIGN_OP, VERIFY_OP, AES_BROWSER_ALGO, AES_LENGTH, HMAC_BROWSER_ALGO, HMAC_BROWSER, HMAC_LENGTH, SHA256_BROWSER_ALGO, SHA512_BROWSER_ALGO, LENGTH_512, } from \"../constants\";\nexport function getAlgo(type) {\n    return type === AES_BROWSER_ALGO\n        ? { length: AES_LENGTH, name: AES_BROWSER_ALGO }\n        : {\n            hash: { name: HMAC_BROWSER_ALGO },\n            name: HMAC_BROWSER,\n        };\n}\nexport function getOps(type) {\n    return type === AES_BROWSER_ALGO\n        ? [ENCRYPT_OP, DECRYPT_OP]\n        : [SIGN_OP, VERIFY_OP];\n}\nexport async function browserExportKey(cryptoKey, type = AES_BROWSER_ALGO) {\n    const subtle = env.getSubtleCrypto();\n    return new Uint8Array(await subtle.exportKey(\"raw\", cryptoKey));\n}\nexport async function browserImportKey(buffer, type = AES_BROWSER_ALGO) {\n    return env.getSubtleCrypto().importKey(\"raw\", buffer, getAlgo(type), true, getOps(type));\n}\nexport async function browserAesEncrypt(iv, key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n    const result = await subtle.encrypt({\n        iv,\n        name: AES_BROWSER_ALGO,\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n}\nexport async function browserAesDecrypt(iv, key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n    const result = await subtle.decrypt({\n        iv,\n        name: AES_BROWSER_ALGO,\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n}\nexport async function browserHmacSha256Sign(key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n    const signature = await subtle.sign({\n        length: HMAC_LENGTH,\n        name: HMAC_BROWSER,\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n}\nexport async function browserHmacSha512Sign(key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n    const signature = await subtle.sign({\n        length: LENGTH_512,\n        name: HMAC_BROWSER,\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n}\nexport async function browserSha256(data) {\n    const subtle = env.getSubtleCrypto();\n    const result = await subtle.digest({\n        name: SHA256_BROWSER_ALGO,\n    }, data);\n    return new Uint8Array(result);\n}\nexport async function browserSha512(data) {\n    const subtle = env.getSubtleCrypto();\n    const result = await subtle.digest({\n        name: SHA512_BROWSER_ALGO,\n    }, data);\n    return new Uint8Array(result);\n}\n"]},"metadata":{},"sourceType":"module"}