{"ast":null,"code":"import _asyncToGenerator from \"/home/sparkout/Desktop/Hari/Sparkout/Angular/Angular_ZUKI/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { approveABI } from \"../../helpers/helper\"; // Connect Wallet\n\nimport Web3 from 'web3';\nimport WalletConnect from '@walletconnect/client';\nimport QRCodeModal from '@walletconnect/qrcode-modal'; // Set web3 and connector\n\nconst web3 = new Web3(window['ethereum']);\nconst connector = new WalletConnect({\n  bridge: 'https://bridge.walletconnect.org'\n});\nlet NavbarComponent = class NavbarComponent {\n  constructor(contractService, storageService, router) {\n    var _this = this;\n\n    this.contractService = contractService;\n    this.storageService = storageService;\n    this.router = router;\n    this.account = {};\n    this.approveAddress = \"0x2811dE52B41267D6FD126B4F8d0ac2248E1C9624\";\n    this.userBalance = '';\n    this.showMobileMenu = false; // Meta mask connection\n\n    this.openMetamask = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.ethereum = window['ethereum'];\n\n      if (typeof _this.ethereum !== 'undefined') {}\n\n      const accounts = yield _this.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n\n      _this.setAccount(accounts[0], _this.ethereum.chainId, 'metamask');\n\n      _this.metamastListener(); // window.location.reload();\n\n    });\n    this.connectWallet = /*#__PURE__*/_asyncToGenerator(function* () {\n      // Create a connector\n      _this.connector = new WalletConnect({\n        bridge: 'https://bridge.walletconnect.org',\n        qrcodeModal: QRCodeModal\n      }); // Check if connection is already established\n\n      if (!_this.connector.connected) {\n        // create new session\n        _this.connector.createSession();\n      }\n\n      _this.wallectConnectListener();\n    });\n  }\n\n  toggleNavbar() {\n    this.showMobileMenu = !this.showMobileMenu;\n  }\n\n  ngOnInit() {\n    this.account = this.storageService.getItem('account') === null ? {\n      address: '',\n      network: '',\n      chainId: '',\n      provider: ''\n    } : JSON.parse(this.storageService.getItem('account') || '{}');\n    this.account.address = \"ConnectWallet\";\n    this.updateBalance();\n  }\n\n  updateBalance() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.approveContract = yield new web3.eth.Contract(approveABI, _this2.approveAddress);\n      let approveToken = yield _this2.approveContract.methods.balanceOf(localStorage.getItem(\"connecttedAddress\")).call().then(receipt => {\n        _this2.userBalance = receipt;\n        console.log(receipt / 10 ** 18);\n      });\n    })();\n  }\n\n  metamastListener() {\n    // Listener\n    this.ethereum.on('accountsChanged', accounts => {\n      this.setAccount(accounts[0], this.ethereum.chainId, 'metamask');\n    });\n    this.ethereum.on('chainChanged', chainId => {\n      this.setAccount(this.account.address, chainId, 'metamask');\n    });\n    this.storageService.setItem('walletconnect', '');\n  }\n\n  wallectConnectListener() {\n    // Subscribe to connection events\n    this.connector.on('connect', (error, payload) => {\n      // window.location.reload();\n      if (error) {\n        throw error;\n      } // Get provided accounts and chainId\n\n\n      const {\n        accounts,\n        chainId\n      } = payload.params[0];\n      this.setAccount(accounts[0], chainId, 'trustwallet');\n    });\n    this.connector.on('session_update', (error, payload) => {\n      if (error) {\n        throw error;\n      } // Get updated accounts and chainId\n\n\n      const {\n        accounts,\n        chainId\n      } = payload.params[0];\n      this.setAccount(accounts[0], chainId, 'trustwallet');\n    });\n    this.connector.on('disconnect', (error, payload) => {\n      if (error) {\n        throw error;\n      } // Delete connector\n\n\n      this.setAccount(' ', ' ', ' ');\n    });\n  }\n\n  setAccount(address, chainId, provider) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let account;\n\n      if (address != '' && address != undefined) {\n        const {\n          network,\n          key\n        } = yield _this3.setNetwork(chainId);\n        account = {\n          address: address,\n          chainId: chainId,\n          network,\n          key,\n          provider: provider\n        };\n      } else {\n        account = {\n          address: '',\n          network: '',\n          chainId: '',\n          provider: '',\n          key: ''\n        };\n      }\n\n      _this3.contractService.setAccount(account);\n\n      _this3.account = Object.assign({}, account);\n\n      _this3.storageService.setItem('account', JSON.stringify(_this3.account));\n\n      _this3.storageService.setItem('connecttedAddress', _this3.account.address);\n    })();\n  }\n\n  setNetwork(chainId) {\n    let network;\n    let key;\n\n    switch (chainId) {\n      case '0x1':\n      case 1:\n        network = 'Mainnet';\n        key = 'ETH';\n        break;\n\n      case '0x3':\n      case 3:\n        network = 'Ropsten';\n        key = 'ETH';\n        break;\n\n      case '0x4':\n      case 4:\n        network = 'Rinkeby';\n        key = 'ETH';\n        break;\n\n      case '0x38':\n      case 56:\n        network = 'BSC Mainnet';\n        key = 'BSC';\n        break;\n\n      case '0x61':\n      case 97:\n        network = 'BSC Testnet';\n        key = 'BSC';\n        break;\n\n      default:\n        network = 'Unknown';\n        break;\n    }\n\n    return {\n      network,\n      key\n    };\n  }\n\n};\nNavbarComponent = __decorate([Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})], NavbarComponent);\nexport { NavbarComponent };\n\nfunction enableDarkTheme() {\n  throw new Error('Function not implemented.');\n}","map":{"version":3,"sources":["/home/sparkout/Desktop/Hari/Sparkout/Angular/Angular_ZUKI/src/app/sharedComponents/navbar/navbar.component.ts"],"names":["__decorate","Component","approveABI","Web3","WalletConnect","QRCodeModal","web3","window","connector","bridge","NavbarComponent","constructor","contractService","storageService","router","account","approveAddress","userBalance","showMobileMenu","openMetamask","ethereum","accounts","request","method","setAccount","chainId","metamastListener","connectWallet","qrcodeModal","connected","createSession","wallectConnectListener","toggleNavbar","ngOnInit","getItem","address","network","provider","JSON","parse","updateBalance","approveContract","eth","Contract","approveToken","methods","balanceOf","localStorage","call","then","receipt","console","log","on","setItem","error","payload","params","undefined","key","setNetwork","Object","assign","stringify","selector","templateUrl","styleUrls","enableDarkTheme","Error"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { approveABI } from \"../../helpers/helper\";\n// Connect Wallet\nimport Web3 from 'web3';\nimport WalletConnect from '@walletconnect/client';\nimport QRCodeModal from '@walletconnect/qrcode-modal';\n// Set web3 and connector\nconst web3 = new Web3(window['ethereum']);\nconst connector = new WalletConnect({\n    bridge: 'https://bridge.walletconnect.org',\n});\nlet NavbarComponent = class NavbarComponent {\n    constructor(contractService, storageService, router) {\n        this.contractService = contractService;\n        this.storageService = storageService;\n        this.router = router;\n        this.account = {};\n        this.approveAddress = \"0x2811dE52B41267D6FD126B4F8d0ac2248E1C9624\";\n        this.userBalance = '';\n        this.showMobileMenu = false;\n        // Meta mask connection\n        this.openMetamask = async () => {\n            this.ethereum = window['ethereum'];\n            if (typeof this.ethereum !== 'undefined') {\n            }\n            const accounts = await this.ethereum.request({\n                method: 'eth_requestAccounts',\n            });\n            this.setAccount(accounts[0], this.ethereum.chainId, 'metamask');\n            this.metamastListener();\n            // window.location.reload();\n        };\n        this.connectWallet = async () => {\n            // Create a connector\n            this.connector = new WalletConnect({\n                bridge: 'https://bridge.walletconnect.org',\n                qrcodeModal: QRCodeModal,\n            });\n            // Check if connection is already established\n            if (!this.connector.connected) {\n                // create new session\n                this.connector.createSession();\n            }\n            this.wallectConnectListener();\n        };\n    }\n    toggleNavbar() {\n        this.showMobileMenu = !this.showMobileMenu;\n    }\n    ngOnInit() {\n        this.account =\n            this.storageService.getItem('account') === null\n                ? { address: '', network: '', chainId: '', provider: '' }\n                : JSON.parse(this.storageService.getItem('account') || '{}');\n        this.account.address = \"ConnectWallet\";\n        this.updateBalance();\n    }\n    async updateBalance() {\n        this.approveContract = await new web3.eth.Contract(approveABI, this.approveAddress);\n        let approveToken = await this.approveContract.methods\n            .balanceOf(localStorage.getItem(\"connecttedAddress\"))\n            .call()\n            .then((receipt) => {\n            this.userBalance = receipt;\n            console.log(receipt / 10 ** 18);\n        });\n    }\n    metamastListener() {\n        // Listener\n        this.ethereum.on('accountsChanged', (accounts) => {\n            this.setAccount(accounts[0], this.ethereum.chainId, 'metamask');\n        });\n        this.ethereum.on('chainChanged', (chainId) => {\n            this.setAccount(this.account.address, chainId, 'metamask');\n        });\n        this.storageService.setItem('walletconnect', '');\n    }\n    wallectConnectListener() {\n        // Subscribe to connection events\n        this.connector.on('connect', (error, payload) => {\n            // window.location.reload();\n            if (error) {\n                throw error;\n            }\n            // Get provided accounts and chainId\n            const { accounts, chainId } = payload.params[0];\n            this.setAccount(accounts[0], chainId, 'trustwallet');\n        });\n        this.connector.on('session_update', (error, payload) => {\n            if (error) {\n                throw error;\n            }\n            // Get updated accounts and chainId\n            const { accounts, chainId } = payload.params[0];\n            this.setAccount(accounts[0], chainId, 'trustwallet');\n        });\n        this.connector.on('disconnect', (error, payload) => {\n            if (error) {\n                throw error;\n            }\n            // Delete connector\n            this.setAccount(' ', ' ', ' ');\n        });\n    }\n    async setAccount(address, chainId, provider) {\n        let account;\n        if (address != '' && address != undefined) {\n            const { network, key } = await this.setNetwork(chainId);\n            account = {\n                address: address,\n                chainId: chainId,\n                network,\n                key,\n                provider: provider,\n            };\n        }\n        else {\n            account = {\n                address: '',\n                network: '',\n                chainId: '',\n                provider: '',\n                key: '',\n            };\n        }\n        this.contractService.setAccount(account);\n        this.account = Object.assign({}, account);\n        this.storageService.setItem('account', JSON.stringify(this.account));\n        this.storageService.setItem('connecttedAddress', this.account.address);\n    }\n    setNetwork(chainId) {\n        let network;\n        let key;\n        switch (chainId) {\n            case '0x1':\n            case 1:\n                network = 'Mainnet';\n                key = 'ETH';\n                break;\n            case '0x3':\n            case 3:\n                network = 'Ropsten';\n                key = 'ETH';\n                break;\n            case '0x4':\n            case 4:\n                network = 'Rinkeby';\n                key = 'ETH';\n                break;\n            case '0x38':\n            case 56:\n                network = 'BSC Mainnet';\n                key = 'BSC';\n                break;\n            case '0x61':\n            case 97:\n                network = 'BSC Testnet';\n                key = 'BSC';\n                break;\n            default:\n                network = 'Unknown';\n                break;\n        }\n        return { network, key };\n    }\n};\nNavbarComponent = __decorate([\n    Component({\n        selector: 'app-navbar',\n        templateUrl: './navbar.component.html',\n        styleUrls: ['./navbar.component.css'],\n    })\n], NavbarComponent);\nexport { NavbarComponent };\nfunction enableDarkTheme() {\n    throw new Error('Function not implemented.');\n}\n"]},"metadata":{},"sourceType":"module"}